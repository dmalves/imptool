;;; $Id: color-filter.scm,v 1.4 2013/03/02 15:54:41 daniel Exp daniel $
;;; $Name:  $

(declare
 (block)
 (inline)
 (inline-primitives)
 (inlining-limit 10000)
 (lambda-lift)
 (constant-fold)
 (standard-bindings)
 (extended-bindings)
 (proper-tail-calls)
 (fixnum)
 (safe))

;;; all filters here use RGB or RGBA images

(define (color-filter-red img)
  (cond
   ((or (eq? (image-name img) 'rgb-image)
        (eq? (image-name img) 'rgba-image))
    (let* ((img2 (image-copy img))
           (vec-g (image-channel-vector img2 1))
           (vec-b (image-channel-vector img2 2)))
      (begin
        (u8vector-fill! vec-g 0)
        (u8vector-fill! vec-b 0)
        img2)))
   (else (error "color-filter-red: image must be rgb or rgba"))))

(define (color-filter-green img)
  (cond
   ((or (eq? (image-name img) 'rgb-image)
        (eq? (image-name img) 'rgba-image))
    (let* ((img2 (image-copy img))
           (vec-r (image-channel-vector img2 0))
           (vec-b (image-channel-vector img2 2)))
      (begin
        (u8vector-fill! vec-r 0)
        (u8vector-fill! vec-b 0)
        img2)))
   (else (error "color-filter-green: image must be rgb or rgba"))))

(define (color-filter-blue img)
  (cond
   ((or (eq? (image-name img) 'rgb-image)
        (eq? (image-name img) 'rgba-image))
    (let* ((img2 (image-copy img))
           (vec-r (image-channel-vector img2 0))
           (vec-g (image-channel-vector img2 1)))
      (begin
        (u8vector-fill! vec-r 0)
        (u8vector-fill! vec-g 0)
        img2)))
   (else (error "color-filter-blue: image must be rgb or rgba"))))

(define (color-filter-invert-colors img)
  (cond
   ((or (eq? (image-name img) 'rgb-image)
        (eq? (image-name img) 'rgba-image))
    (let* ((img2 (image-copy img))
           (vec-r (image-channel-vector img2 0))
           (vec-g (image-channel-vector img2 1))
           (vec-b (image-channel-vector img2 2)))
      (begin
        (u8vector-map! (lambda (x) (- 255 x)) vec-r)
        (u8vector-map! (lambda (x) (- 255 x)) vec-g)
        (u8vector-map! (lambda (x) (- 255 x)) vec-b)
        img2)))
   (else (error "color-filter-invert-colors: image must be rgb or rgba"))))

(define (color-filter-solarize img threshold)
  (cond
   ((or (eq? (image-name img) 'rgb-image)
        (eq? (image-name img) 'rgba-image))
    (let* ((img2 (image-copy img))
           (vec-r (image-channel-vector img2 0))
           (vec-g (image-channel-vector img2 1))
           (vec-b (image-channel-vector img2 2))
           (func (lambda (color)
                   (cond
                    ((> color threshold) (- 255 color))
                    (else color)))))
      (begin
        (u8vector-map! func vec-r)
        (u8vector-map! func vec-g)
        (u8vector-map! func vec-b)
        img2)))
   (else (error "color-filter-solarise: image must be rgb or rgba"))))


(define (color-filter-posterize img n-levels)
  (cond
   ((or (eq? (image-name img) 'rgb-image)
        (eq? (image-name img) 'rgba-image))
    (let* ((img2 (image-copy img))
           (vec-r (image-channel-vector img2 0))
           (vec-g (image-channel-vector img2 1))
           (vec-b (image-channel-vector img2 2))
           (n     (max 2 (min n-levels 256)))
           (n-areas  (fxquotient 256 n))
           (n-values (fxquotient 256 (fx- n 1)))
           (func (lambda (color)
                   (u8fit (fx* n-values (fxquotient color n-areas))))))
      (begin
        (u8vector-map! func vec-r)
        (u8vector-map! func vec-g)
        (u8vector-map! func vec-b)
        img2)))
   (else (error "color-filter-posterize: image must be rgb or rgba"))))

(define (color-filter-adjust image red green blue)
  (cond ((or (eq? (image-name image) 'rgb-image)
             (eq? (image-name image) 'rgba-image))
         (let* ((img2 (image-copy image))
                (vec-r (image-channel-vector img2 0))
                (vec-g (image-channel-vector img2 1))
                (vec-b (image-channel-vector img2 2))
                (func (lambda (color1 color2)
                        (u8fit (fx+ color1 color2)))))
           (begin
             (u8vector-map! (lambda (color) (func color red))   vec-r)
             (u8vector-map! (lambda (color) (func color green)) vec-g)
             (u8vector-map! (lambda (color) (func color blue))  vec-b)
             img2)))
        (else (error "color-adjust: image must be rgb or rgba"))))


(define (color-filter-sepia image)
  (declare (standard-bindings)
           (extended-bindings)
           (fixnum)
           (not safe))
  (cond ((or (eq? (image-name image) 'rgb-image)
             (eq? (image-name image) 'rgba-image))
         (let* ((img2 (image-copy image))
               (vecs (image-vectors img2))
               (vec-r (list-ref vecs 0))
               (vec-g (list-ref vecs 1))
               (vec-b (list-ref vecs 2))
               (r 0) (g 0) (b 0)
               (size  (u8vector-length vec-r))
               (func-r (lambda (r g b)
                         (u8fit (##fxquotient (fx+ (##fx* r 393) (##fx* g 769) (##fx* b 189)) 1000))))
               (func-g (lambda (r g b)
                         (u8fit (##fxquotient (fx+ (##fx* r 349) (##fx* g 686) (##fx* b 168)) 1000))))
               (func-b (lambda (r g b)
                         (u8fit (##fxquotient (fx+ (##fx* r 272) (##fx* g 534) (##fx* b 131)) 1000)))))
           (let loop-i ((i 0))
             (cond ((##fx< i size)
                    (set! r (##u8vector-ref vec-r i))
                    (set! g (##u8vector-ref vec-g i))
                    (set! b (##u8vector-ref vec-b i))
                    (##u8vector-set! vec-r i (func-r r g b))
                    (##u8vector-set! vec-g i (func-g r g b))
                    (##u8vector-set! vec-b i (func-b r g b))
                    (loop-i (##fx+ 1 i)))
                   (else
                    img2)))))
        (else (error "color-filter-sepia: image must be rgb or rgba"))))


(define (color-filter-sepia-fast image)
  (declare (standard-bindings)
           (extended-bindings)
           (fixnum)
           (not safe))
  (cond ((or (eq? (image-name image) 'rgb-image)
             (eq? (image-name image) 'rgba-image))
         (let* ((img2 (image-copy image))
                (vecs  (image-vectors img2))
                (vec-r (list-ref vecs 0))
                (vec-g (list-ref vecs 1))
                (vec-b (list-ref vecs 2))
                (r 0) (g 0) (b 0) (d 0)
                (size (u8vector-length vec-r))
                (func (lambda (r g b)
                        (##fxquotient (##fx+ (##fx* r 299) (##fx* g 587) (##fx* b 114)) 1000))))
           (let loop-i ((i 0))
             (cond ((##fx< i size)
                    (set! r (##u8vector-ref vec-r i))
                    (set! g (##u8vector-ref vec-g i))
                    (set! b (##u8vector-ref vec-b i))
                    (set! d (func r g b))
                    (##u8vector-set! vec-r i (u8fit (##fx+ d 39)))
                    (##u8vector-set! vec-g i (u8fit (##fx+ d 14)))
                    (##u8vector-set! vec-b i (u8fit (##fx- d 36)))
                    (loop-i (##fx+ i 1)))
                   (else
                    img2)))))
        (else (error "color-filter-sepia-fast: image must be rgb or rgba"))))



(define (color-filter-sepia-brow image)
  (declare (standard-bindings)
           (extended-bindings)
           (fixnum)
           (not safe))
  (cond ((or (eq? (image-name image) 'rgb-image)
             (eq? (image-name image) 'rgba-image))
         (let* ((img2 (image-copy image))
                (vecs (image-vectors img2))
                (vec-r (list-ref vecs 0))
                (vec-g (list-ref vecs 1))
                (vec-b (list-ref vecs 2))
                (r 0) (g 0) (b 0) (gray 0)
                (intensity 26718)
                (intensity-r (fxquotient (fx* 956 intensity)  1000))
                (intensity-g (fxquotient (fx* 272 intensity)  1000))
                (intensity-b (fxquotient (fx* 1105 intensity) 1000))
                (size (u8vector-length vec-r)))
           (let loop-i ((i 0))
             (cond ((##fx< i size)
                    (set! r (##u8vector-ref vec-r i))
                    (set! g (##u8vector-ref vec-g i))
                    (set! b (##u8vector-ref vec-b i))
                    (set! gray (fx+ (##fx* 299 r) (##fx* 587 g) (##fx* 114 b)))
                    (##u8vector-set! vec-r i (u8fit (##fxquotient (##fx+ gray intensity-r) 1000)))
                    (##u8vector-set! vec-g i (u8fit (##fxquotient (##fx* 1060 (##fx- gray intensity-g))  1000000)))
                    (##u8vector-set! vec-b i (u8fit (##fxquotient (##fx* 950  (fx- gray intensity-b)) 1000000)))
                    (loop-i (##fx+ i 1)))
                   (else
                    img2)))))
        (else (error "color-filter-sepia2: image must be rgb or rgba"))))


(define (color-filter-duotone image tones)
  (declare (standard-bindings)
           (extended-bindings)
           (fixnum)
           (not safe))
  (cond ((or (eq? (image-name image) 'rgb-image)
              (eq? (image-name image) 'rgba-image))
         (let* ((img2 (image-copy image))
                (vecs (image-vectors img2))
                (vec-r (list-ref vecs 0))
                (vec-g (list-ref vecs 1))
                (vec-b (list-ref vecs 2))
                (r 0) (g 0) (b 0) (gray 0)
                (tone-0 (list-ref tones 0))
                (tone-1 (list-ref tones 1))
                (tone-2 (list-ref tones 2))
                (duo-r (lambda (x) (##fxquotient (##fx* x tone-0) 255000)))
                (duo-g (lambda (x) (##fxquotient (##fx* x tone-1) 255000)))
                (duo-b (lambda (x) (##fxquotient (##fx* x tone-2) 255000)))
                (size (##u8vector-length vec-r)))
           (let loop-i ((i 0))
             (cond ((##fx< i size)
                    (set! r (##u8vector-ref vec-r i))
                    (set! g (##u8vector-ref vec-g i))
                    (set! b (##u8vector-ref vec-b i))
                    (set! gray (fx+ (##fx* 299 r) (##fx* 587 g) (##fx* 114 b)))
                    (##u8vector-set! vec-r i (u8fit (duo-r gray)))
                    (##u8vector-set! vec-g i (u8fit (duo-g gray)))
                    (##u8vector-set! vec-b i (u8fit (duo-b gray)))
                    (loop-i (##fx+ i 1)))
                   (else
                    img2)))))
        (else (error "color-filter-sepia2: image must be rgb or rgba"))))




;; (define (color-filter-posterize image)
;;   (cond
;;    ((or (image-rgb? image) (image-rgba? image))
;;     (let* ((green-vec (u8matrix-get-raw-vector (image-get-green-matrix image)))
;;            (blue-vec  (u8matrix-get-raw-vector (image-get-blue-matrix image)))
;;            (red-vec   (u8matrix-get-raw-vector (image-get-red-matrix image)))
;;            (lut-i '#(64 128 192 255))
;;            (lut-data '#(0 72 140 220))
;;            (func (lambda (color)
;;                    (let loop-i ((i 0))
;;                      (cond ((< i 4)
;;                             (cond
;;                              ((<= color (vector-ref lut-i i)) (u8fit (vector-ref lut-data i)))
;;                              (else
;;                               (loop-i (+ i 1))))))))))
;;       (begin
;;         (u8vector-map! green-vec func)
;;         (u8vector-map! blue-vec  func)
;;         (u8vector-map! red-vec   func ))))
;;    (else (error "color-filter-posterize: image must be rgb or rgba"))))


;; (define (color-filter-sepia2 image intensity)
;;   (cond ((or (eq? (image-name image) 'rgb-image)
;;               (eq? (image-name image) 'rgba-image))
;;          (let* ((img2 (image-copy image))
;;                 (vecs (image-vectors img2))
;;                 (vec-r (list-ref vecs 0))
;;                 (vec-g (list-ref vecs 1))
;;                 (vec-b (list-ref vecs 2))
;;                 (r 0) (g 0) (b 0) (gray 0) (depth 20)
;;                 (size (u8vector-length vec-r)))
;;            (let loop-i ((i 0))
;;              (cond ((fx< i size)
;;                     (set! r (u8vector-ref vec-r i))
;;                     (set! g (u8vector-ref vec-g i))
;;                     (set! b (u8vector-ref vec-b i))
;;                     (set! gray (fxquotient (fx+ r g b) 3))
;;                     (u8vector-set! vec-r i (u8fit (fx+ gray (fx* depth 2))))
;;                     (u8vector-set! vec-g i (u8fit (fx+ gray depth)))
;;                     (u8vector-set! vec-b i (u8fit (fx- gray intensity)))
;;                     (loop-i (fx+ i 1)))
;;                    (else
;;                     img2)))))
;;         (else (error "color-filter-sepia2: image must be rgb or rgba"))))
